/*!
  * Bootstrap v5.2.2 (https://getbootstrap.com/)
  * Copyright 2011-2022 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)
  * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
  */ !function (t, e) { "object" == typeof exports && "undefined" != typeof module ? module.exports = e(require("@popperjs/core")) : "function" == typeof define && define.amd ? define(["@popperjs/core"], e) : (t = "undefined" != typeof globalThis ? globalThis : t || self).bootstrap = e(t.Popper) }(this, function (t) { "use strict"; let e = function t(e) { if (e && e.__esModule) return e; let i = Object.create(null, { [Symbol.toStringTag]: { value: "Module" } }); if (e) { for (let s in e) if ("default" !== s) { let n = Object.getOwnPropertyDescriptor(e, s); Object.defineProperty(i, s, n.get ? n : { enumerable: !0, get: () => e[s] }) } } return i.default = e, Object.freeze(i) }(t), i = "transitionend", s = t => null == t ? `${t}` : Object.prototype.toString.call(t).match(/\s([a-z]+)/i)[1].toLowerCase(), n = t => { do t += Math.floor(1e6 * Math.random()); while (document.getElementById(t)); return t }, r = t => { let e = t.getAttribute("data-bs-target"); if (!e || "#" === e) { let i = t.getAttribute("href"); if (!i || !i.includes("#") && !i.startsWith(".")) return null; i.includes("#") && !i.startsWith("#") && (i = `#${i.split("#")[1]}`), e = i && "#" !== i ? i.trim() : null } return e }, o = t => { let e = r(t); return e && document.querySelector(e) ? e : null }, l = t => { let e = r(t); return e ? document.querySelector(e) : null }, a = t => { if (!t) return 0; let { transitionDuration: e, transitionDelay: i } = window.getComputedStyle(t), s = Number.parseFloat(e), n = Number.parseFloat(i); return s || n ? (e = e.split(",")[0], i = i.split(",")[0], (Number.parseFloat(e) + Number.parseFloat(i)) * 1e3) : 0 }, h = t => { t.dispatchEvent(new Event(i)) }, c = t => !!t && "object" == typeof t && (void 0 !== t.jquery && (t = t[0]), void 0 !== t.nodeType), u = t => c(t) ? t.jquery ? t[0] : t : "string" == typeof t && t.length > 0 ? document.querySelector(t) : null, d = t => { if (!c(t) || 0 === t.getClientRects().length) return !1; let e = "visible" === getComputedStyle(t).getPropertyValue("visibility"), i = t.closest("details:not([open])"); if (!i) return e; if (i !== t) { let s = t.closest("summary"); if (s && s.parentNode !== i || null === s) return !1 } return e }, g = t => !!(!t || t.nodeType !== Node.ELEMENT_NODE || t.classList.contains("disabled")) || (void 0 !== t.disabled ? t.disabled : t.hasAttribute("disabled") && "false" !== t.getAttribute("disabled")), f = t => { if (!document.documentElement.attachShadow) return null; if ("function" == typeof t.getRootNode) { let e = t.getRootNode(); return e instanceof ShadowRoot ? e : null } return t instanceof ShadowRoot ? t : t.parentNode ? f(t.parentNode) : null }, p = () => { }, m = t => { t.offsetHeight }, b = () => window.jQuery && !document.body.hasAttribute("data-bs-no-jquery") ? window.jQuery : null, y = [], v = t => { "loading" === document.readyState ? (y.length || document.addEventListener("DOMContentLoaded", () => { for (let t of y) t() }), y.push(t)) : t() }, A = () => "rtl" === document.documentElement.dir, w = t => { v(() => { let e = b(); if (e) { let i = t.NAME, s = e.fn[i]; e.fn[i] = t.jQueryInterface, e.fn[i].Constructor = t, e.fn[i].noConflict = () => (e.fn[i] = s, t.jQueryInterface) } }) }, C = t => { "function" == typeof t && t() }, E = (t, e, s = !0) => { if (!s) { C(t); return } let n = a(e) + 5, r = !1, o = ({ target: s }) => { s === e && (r = !0, e.removeEventListener(i, o), C(t)) }; e.addEventListener(i, o), setTimeout(() => { r || h(e) }, n) }, T = (t, e, i, s) => { let n = t.length, r = t.indexOf(e); return -1 === r ? !i && s ? t[n - 1] : t[0] : (r += i ? 1 : -1, s && (r = (r + n) % n), t[Math.max(0, Math.min(r, n - 1))]) }, $ = /[^.]*(?=\..*)\.|.*/, k = /\..*/, L = /::\d+$/, D = {}, N = 1, I = { mouseenter: "mouseover", mouseleave: "mouseout" }, P = new Set(["click", "dblclick", "mouseup", "mousedown", "contextmenu", "mousewheel", "DOMMouseScroll", "mouseover", "mouseout", "mousemove", "selectstart", "selectend", "keydown", "keypress", "keyup", "orientationchange", "touchstart", "touchmove", "touchend", "touchcancel", "pointerdown", "pointermove", "pointerup", "pointerleave", "pointercancel", "gesturestart", "gesturechange", "gestureend", "focus", "blur", "change", "reset", "select", "submit", "focusin", "focusout", "load", "unload", "beforeunload", "resize", "move", "DOMContentLoaded", "readystatechange", "error", "abort", "scroll"]); function O(t, e) { return e && `${e}::${N++}` || t.uidEvent || N++ } function S(t) { let e = O(t); return t.uidEvent = e, D[e] = D[e] || {}, D[e] } function _(t, e, i = null) { return Object.values(t).find(t => t.callable === e && t.delegationSelector === i) } function x(t, e, i) { let s = "string" == typeof e, n = H(t); return P.has(n) || (n = t), [s, s ? i : e || i, n] } function M(t, e, i, s, n) { var r, o, l, a, h, c; if ("string" != typeof e || !t) return; let [u, d, g] = x(e, i, s); e in I && (d = (r = d, function (t) { if (!t.relatedTarget || t.relatedTarget !== t.delegateTarget && !t.delegateTarget.contains(t.relatedTarget)) return r.call(this, t) })); let f = S(t), p = f[g] || (f[g] = {}), m = _(p, d, u ? i : null); if (m) { m.oneOff = m.oneOff && n; return } let b = O(d, e.replace($, "")), y = u ? (o = t, l = i, a = d, function t(e) { let i = o.querySelectorAll(l); for (let { target: s } = e; s && s !== this; s = s.parentNode)for (let n of i) if (n === s) return q(e, { delegateTarget: s }), t.oneOff && z.off(o, e.type, l, a), a.apply(s, [e]) }) : (h = t, c = d, function t(e) { return q(e, { delegateTarget: h }), t.oneOff && z.off(h, e.type, c), c.apply(h, [e]) }); y.delegationSelector = u ? i : null, y.callable = d, y.oneOff = n, y.uidEvent = b, p[b] = y, t.addEventListener(g, y, u) } function j(t, e, i, s, n) { let r = _(e[i], s, n); r && (t.removeEventListener(i, r, Boolean(n)), delete e[i][r.uidEvent]) } function F(t, e, i, s) { let n = e[i] || {}; for (let r of Object.keys(n)) if (r.includes(s)) { let o = n[r]; j(t, e, i, o.callable, o.delegationSelector) } } function H(t) { return I[t = t.replace(k, "")] || t } let z = { on(t, e, i, s) { M(t, e, i, s, !1) }, one(t, e, i, s) { M(t, e, i, s, !0) }, off(t, e, i, s) { if ("string" != typeof e || !t) return; let [n, r, o] = x(e, i, s), l = o !== e, a = S(t), h = a[o] || {}, c = e.startsWith("."); if (void 0 !== r) { if (!Object.keys(h).length) return; j(t, a, o, r, n ? i : null); return } if (c) for (let u of Object.keys(a)) F(t, a, u, e.slice(1)); for (let d of Object.keys(h)) { let g = d.replace(L, ""); if (!l || e.includes(g)) { let f = h[d]; j(t, a, o, f.callable, f.delegationSelector) } } }, trigger(t, e, i) { if ("string" != typeof e || !t) return null; let s = b(), n = H(e), r = null, o = !0, l = !0, a = !1; e !== n && s && (r = s.Event(e, i), s(t).trigger(r), o = !r.isPropagationStopped(), l = !r.isImmediatePropagationStopped(), a = r.isDefaultPrevented()); let h = new Event(e, { bubbles: o, cancelable: !0 }); return h = q(h, i), a && h.preventDefault(), l && t.dispatchEvent(h), h.defaultPrevented && r && r.preventDefault(), h } }; function q(t, e) { for (let [i, s] of Object.entries(e || {})) try { t[i] = s } catch (n) { Object.defineProperty(t, i, { configurable: !0, get: () => s }) } return t } let W = new Map, B = { set(t, e, i) { W.has(t) || W.set(t, new Map); let s = W.get(t); if (!s.has(e) && 0 !== s.size) { console.error(`Bootstrap doesn't allow more than one instance per element. Bound instance: ${Array.from(s.keys())[0]}.`); return } s.set(e, i) }, get: (t, e) => W.has(t) && W.get(t).get(e) || null, remove(t, e) { if (!W.has(t)) return; let i = W.get(t); i.delete(e), 0 === i.size && W.delete(t) } }; function K(t) { if ("true" === t) return !0; if ("false" === t) return !1; if (t === Number(t).toString()) return Number(t); if ("" === t || "null" === t) return null; if ("string" != typeof t) return t; try { return JSON.parse(decodeURIComponent(t)) } catch (e) { return t } } function V(t) { return t.replace(/[A-Z]/g, t => `-${t.toLowerCase()}`) } let R = { setDataAttribute(t, e, i) { t.setAttribute(`data-bs-${V(e)}`, i) }, removeDataAttribute(t, e) { t.removeAttribute(`data-bs-${V(e)}`) }, getDataAttributes(t) { if (!t) return {}; let e = {}, i = Object.keys(t.dataset).filter(t => t.startsWith("bs") && !t.startsWith("bsConfig")); for (let s of i) { let n = s.replace(/^bs/, ""); e[n = n.charAt(0).toLowerCase() + n.slice(1, n.length)] = K(t.dataset[s]) } return e }, getDataAttribute: (t, e) => K(t.getAttribute(`data-bs-${V(e)}`)) }; class Y { static get Default() { return {} } static get DefaultType() { return {} } static get NAME() { throw Error('You have to implement the static method "NAME", for each component!') } _getConfig(t) { return t = this._mergeConfigObj(t), t = this._configAfterMerge(t), this._typeCheckConfig(t), t } _configAfterMerge(t) { return t } _mergeConfigObj(t, e) { let i = c(e) ? R.getDataAttribute(e, "config") : {}; return { ...this.constructor.Default, ..."object" == typeof i ? i : {}, ...c(e) ? R.getDataAttributes(e) : {}, ..."object" == typeof t ? t : {} } } _typeCheckConfig(t, e = this.constructor.DefaultType) { for (let i of Object.keys(e)) { let n = e[i], r = t[i], o = c(r) ? "element" : s(r); if (!RegExp(n).test(o)) throw TypeError(`${this.constructor.NAME.toUpperCase()}: Option "${i}" provided type "${o}" but expected type "${n}".`) } } } class Q extends Y { constructor(t, e) { if (super(), !(t = u(t))) return; this._element = t, this._config = this._getConfig(e), B.set(this._element, this.constructor.DATA_KEY, this) } dispose() { for (let t of (B.remove(this._element, this.constructor.DATA_KEY), z.off(this._element, this.constructor.EVENT_KEY), Object.getOwnPropertyNames(this))) this[t] = null } _queueCallback(t, e, i = !0) { E(t, e, i) } _getConfig(t) { return t = this._mergeConfigObj(t, this._element), t = this._configAfterMerge(t), this._typeCheckConfig(t), t } static getInstance(t) { return B.get(u(t), this.DATA_KEY) } static getOrCreateInstance(t, e = {}) { return this.getInstance(t) || new this(t, "object" == typeof e ? e : null) } static get VERSION() { return "5.2.2" } static get DATA_KEY() { return `bs.${this.NAME}` } static get EVENT_KEY() { return `.${this.DATA_KEY}` } static eventName(t) { return `${t}${this.EVENT_KEY}` } } let U = (t, e = "hide") => { let i = `click.dismiss${t.EVENT_KEY}`, s = t.NAME; z.on(document, i, `[data-bs-dismiss="${s}"]`, function (i) { if (["A", "AREA"].includes(this.tagName) && i.preventDefault(), g(this)) return; let n = l(this) || this.closest(`.${s}`), r = t.getOrCreateInstance(n); r[e]() }) }, G = ".bs.alert", Z = `close${G}`, J = `closed${G}`; class X extends Q { static get NAME() { return "alert" } close() { let t = z.trigger(this._element, Z); if (t.defaultPrevented) return; this._element.classList.remove("show"); let e = this._element.classList.contains("fade"); this._queueCallback(() => this._destroyElement(), this._element, e) } _destroyElement() { this._element.remove(), z.trigger(this._element, J), this.dispose() } static jQueryInterface(t) { return this.each(function () { let e = X.getOrCreateInstance(this); if ("string" == typeof t) { if (void 0 === e[t] || t.startsWith("_") || "constructor" === t) throw TypeError(`No method named "${t}"`); e[t](this) } }) } } U(X, "close"), w(X); let tt = { find: (t, e = document.documentElement) => [].concat(...Element.prototype.querySelectorAll.call(e, t)), findOne: (t, e = document.documentElement) => Element.prototype.querySelector.call(e, t), children: (t, e) => [].concat(...t.children).filter(t => t.matches(e)), parents(t, e) { let i = [], s = t.parentNode.closest(e); for (; s;)i.push(s), s = s.parentNode.closest(e); return i }, prev(t, e) { let i = t.previousElementSibling; for (; i;) { if (i.matches(e)) return [i]; i = i.previousElementSibling } return [] }, next(t, e) { let i = t.nextElementSibling; for (; i;) { if (i.matches(e)) return [i]; i = i.nextElementSibling } return [] }, focusableChildren(t) { let e = ["a", "button", "input", "textarea", "select", "details", "[tabindex]", '[contenteditable="true"]'].map(t => `${t}:not([tabindex^="-"])`).join(","); return this.find(e, t).filter(t => !g(t) && d(t)) } }, te = ".bs.collapse", ti = `show${te}`, ts = `shown${te}`, tn = `hide${te}`, tr = `hidden${te}`, to = `click${te}.data-api`, tl = "show", ta = "collapse", th = "collapsing", tc = `:scope .${ta} .${ta}`, tu = '[data-bs-toggle="collapse"]', td = { parent: null, toggle: !0 }, tg = { parent: "(null|element)", toggle: "boolean" }; class tf extends Q { constructor(t, e) { super(t, e), this._isTransitioning = !1, this._triggerArray = []; let i = tt.find(tu); for (let s of i) { let n = o(s), r = tt.find(n).filter(t => t === this._element); null !== n && r.length && this._triggerArray.push(s) } this._initializeChildren(), this._config.parent || this._addAriaAndCollapsedClass(this._triggerArray, this._isShown()), this._config.toggle && this.toggle() } static get Default() { return td } static get DefaultType() { return tg } static get NAME() { return "collapse" } toggle() { this._isShown() ? this.hide() : this.show() } show() { if (this._isTransitioning || this._isShown()) return; let t = []; if (this._config.parent && (t = this._getFirstLevelChildren(".collapse.show, .collapse.collapsing").filter(t => t !== this._element).map(t => tf.getOrCreateInstance(t, { toggle: !1 }))), t.length && t[0]._isTransitioning) return; let e = z.trigger(this._element, ti); if (e.defaultPrevented) return; for (let i of t) i.hide(); let s = this._getDimension(); this._element.classList.remove(ta), this._element.classList.add(th), this._element.style[s] = 0, this._addAriaAndCollapsedClass(this._triggerArray, !0), this._isTransitioning = !0; let n = () => { this._isTransitioning = !1, this._element.classList.remove(th), this._element.classList.add(ta, tl), this._element.style[s] = "", z.trigger(this._element, ts) }, r = s[0].toUpperCase() + s.slice(1), o = `scroll${r}`; this._queueCallback(n, this._element, !0), this._element.style[s] = `${this._element[o]}px` } hide() { if (this._isTransitioning || !this._isShown()) return; let t = z.trigger(this._element, tn); if (t.defaultPrevented) return; let e = this._getDimension(); for (let i of (this._element.style[e] = `${this._element.getBoundingClientRect()[e]}px`, m(this._element), this._element.classList.add(th), this._element.classList.remove(ta, tl), this._triggerArray)) { let s = l(i); s && !this._isShown(s) && this._addAriaAndCollapsedClass([i], !1) } this._isTransitioning = !0; let n = () => { this._isTransitioning = !1, this._element.classList.remove(th), this._element.classList.add(ta), z.trigger(this._element, tr) }; this._element.style[e] = "", this._queueCallback(n, this._element, !0) } _isShown(t = this._element) { return t.classList.contains(tl) } _configAfterMerge(t) { return t.toggle = Boolean(t.toggle), t.parent = u(t.parent), t } _getDimension() { return this._element.classList.contains("collapse-horizontal") ? "width" : "height" } _initializeChildren() { if (!this._config.parent) return; let t = this._getFirstLevelChildren(tu); for (let e of t) { let i = l(e); i && this._addAriaAndCollapsedClass([e], this._isShown(i)) } } _getFirstLevelChildren(t) { let e = tt.find(tc, this._config.parent); return tt.find(t, this._config.parent).filter(t => !e.includes(t)) } _addAriaAndCollapsedClass(t, e) { if (t.length) for (let i of t) i.classList.toggle("collapsed", !e), i.setAttribute("aria-expanded", e) } static jQueryInterface(t) { let e = {}; return "string" == typeof t && /show|hide/.test(t) && (e.toggle = !1), this.each(function () { let i = tf.getOrCreateInstance(this, e); if ("string" == typeof t) { if (void 0 === i[t]) throw TypeError(`No method named "${t}"`); i[t]() } }) } } z.on(document, to, tu, function (t) { ("A" === t.target.tagName || t.delegateTarget && "A" === t.delegateTarget.tagName) && t.preventDefault(); let e = o(this), i = tt.find(e); for (let s of i) tf.getOrCreateInstance(s, { toggle: !1 }).toggle() }), w(tf); let t8 = "dropdown", tp = ".bs.dropdown", tm = ".data-api", tb = "ArrowDown", ty = `hide${tp}`, tv = `hidden${tp}`, tA = `show${tp}`, tw = `shown${tp}`, tC = `click${tp}${tm}`, tE = `keydown${tp}${tm}`, tT = `keyup${tp}${tm}`, t$ = "show", tk = '[data-bs-toggle="dropdown"]:not(.disabled):not(:disabled)', t9 = `${tk}.${t$}`, tL = ".dropdown-menu", tD = A() ? "top-end" : "top-start", tN = A() ? "top-start" : "top-end", tI = A() ? "bottom-end" : "bottom-start", tP = A() ? "bottom-start" : "bottom-end", tO = A() ? "left-start" : "right-start", tS = A() ? "right-start" : "left-start", t_ = { autoClose: !0, boundary: "clippingParents", display: "dynamic", offset: [0, 2], popperConfig: null, reference: "toggle" }, tx = { autoClose: "(boolean|string)", boundary: "(string|element)", display: "string", offset: "(array|string|function)", popperConfig: "(null|object|function)", reference: "(string|element|object)" }; class tM extends Q { constructor(t, e) { super(t, e), this._popper = null, this._parent = this._element.parentNode, this._menu = tt.next(this._element, tL)[0] || tt.prev(this._element, tL)[0] || tt.findOne(tL, this._parent), this._inNavbar = this._detectNavbar() } static get Default() { return t_ } static get DefaultType() { return tx } static get NAME() { return t8 } toggle() { return this._isShown() ? this.hide() : this.show() } show() { if (g(this._element) || this._isShown()) return; let t = { relatedTarget: this._element }, e = z.trigger(this._element, tA, t); if (!e.defaultPrevented) { if (this._createPopper(), "ontouchstart" in document.documentElement && !this._parent.closest(".navbar-nav")) for (let i of [].concat(...document.body.children)) z.on(i, "mouseover", p); this._element.focus(), this._element.setAttribute("aria-expanded", !0), this._menu.classList.add(t$), this._element.classList.add(t$), z.trigger(this._element, tw, t) } } hide() { if (g(this._element) || !this._isShown()) return; let t = { relatedTarget: this._element }; this._completeHide(t) } dispose() { this._popper && this._popper.destroy(), super.dispose() } update() { this._inNavbar = this._detectNavbar(), this._popper && this._popper.update() } _completeHide(t) { let e = z.trigger(this._element, ty, t); if (!e.defaultPrevented) { if ("ontouchstart" in document.documentElement) for (let i of [].concat(...document.body.children)) z.off(i, "mouseover", p); this._popper && this._popper.destroy(), this._menu.classList.remove(t$), this._element.classList.remove(t$), this._element.setAttribute("aria-expanded", "false"), R.removeDataAttribute(this._menu, "popper"), z.trigger(this._element, tv, t) } } _getConfig(t) { if ("object" == typeof (t = super._getConfig(t)).reference && !c(t.reference) && "function" != typeof t.reference.getBoundingClientRect) throw TypeError(`${t8.toUpperCase()}: Option "reference" provided type "object" without a required "getBoundingClientRect" method.`); return t } _createPopper() { if (void 0 === e) throw TypeError("Bootstrap's dropdowns require Popper (https://popper.js.org)"); let t = this._element; "parent" === this._config.reference ? t = this._parent : c(this._config.reference) ? t = u(this._config.reference) : "object" == typeof this._config.reference && (t = this._config.reference); let i = this._getPopperConfig(); this._popper = e.createPopper(t, this._menu, i) } _isShown() { return this._menu.classList.contains(t$) } _getPlacement() { let t = this._parent; if (t.classList.contains("dropend")) return tO; if (t.classList.contains("dropstart")) return tS; if (t.classList.contains("dropup-center")) return "top"; if (t.classList.contains("dropdown-center")) return "bottom"; let e = "end" === getComputedStyle(this._menu).getPropertyValue("--bs-position").trim(); return t.classList.contains("dropup") ? e ? tN : tD : e ? tP : tI } _detectNavbar() { return null !== this._element.closest(".navbar") } _getOffset() { let { offset: t } = this._config; return "string" == typeof t ? t.split(",").map(t => Number.parseInt(t, 10)) : "function" == typeof t ? e => t(e, this._element) : t } _getPopperConfig() { let t = { placement: this._getPlacement(), modifiers: [{ name: "preventOverflow", options: { boundary: this._config.boundary } }, { name: "offset", options: { offset: this._getOffset() } }] }; return (this._inNavbar || "static" === this._config.display) && (R.setDataAttribute(this._menu, "popper", "static"), t.modifiers = [{ name: "applyStyles", enabled: !1 }]), { ...t, ..."function" == typeof this._config.popperConfig ? this._config.popperConfig(t) : this._config.popperConfig } } _selectMenuItem({ key: t, target: e }) { let i = tt.find(".dropdown-menu .dropdown-item:not(.disabled):not(:disabled)", this._menu).filter(t => d(t)); i.length && T(i, e, t === tb, !i.includes(e)).focus() } static jQueryInterface(t) { return this.each(function () { let e = tM.getOrCreateInstance(this, t); if ("string" == typeof t) { if (void 0 === e[t]) throw TypeError(`No method named "${t}"`); e[t]() } }) } static clearMenus(t) { if (2 === t.button || "keyup" === t.type && "Tab" !== t.key) return; let e = tt.find(t9); for (let i of e) { let s = tM.getInstance(i); if (!s || !1 === s._config.autoClose) continue; let n = t.composedPath(), r = n.includes(s._menu); if (n.includes(s._element) || "inside" === s._config.autoClose && !r || "outside" === s._config.autoClose && r || s._menu.contains(t.target) && ("keyup" === t.type && "Tab" === t.key || /input|select|option|textarea|form/i.test(t.target.tagName))) continue; let o = { relatedTarget: s._element }; "click" === t.type && (o.clickEvent = t), s._completeHide(o) } } static dataApiKeydownHandler(t) { let e = /input|textarea/i.test(t.target.tagName), i = "Escape" === t.key, s = ["ArrowUp", tb].includes(t.key); if (!s && !i || e && !i) return; t.preventDefault(); let n = this.matches(tk) ? this : tt.prev(this, tk)[0] || tt.next(this, tk)[0] || tt.findOne(tk, t.delegateTarget.parentNode), r = tM.getOrCreateInstance(n); if (s) { t.stopPropagation(), r.show(), r._selectMenuItem(t); return } r._isShown() && (t.stopPropagation(), r.hide(), n.focus()) } } z.on(document, tE, tk, tM.dataApiKeydownHandler), z.on(document, tE, tL, tM.dataApiKeydownHandler), z.on(document, tC, tM.clearMenus), z.on(document, tT, tM.clearMenus), z.on(document, tC, tk, function (t) { t.preventDefault(), tM.getOrCreateInstance(this).toggle() }), w(tM); let tj = ".fixed-top, .fixed-bottom, .is-fixed, .sticky-top", tF = ".sticky-top", tH = "padding-right", tz = "margin-right", tq = "backdrop", tW = "show", tB = `mousedown.bs.${tq}`, tK = { className: "modal-backdrop", clickCallback: null, isAnimated: !1, isVisible: !0, rootElement: "body" }, tV = { className: "string", clickCallback: "(function|null)", isAnimated: "boolean", isVisible: "boolean", rootElement: "(element|string)" }; class tR extends Y { constructor(t) { super(), this._config = this._getConfig(t), this._isAppended = !1, this._element = null } static get Default() { return tK } static get DefaultType() { return tV } static get NAME() { return tq } show(t) { if (!this._config.isVisible) { C(t); return } this._append(); let e = this._getElement(); this._config.isAnimated && m(e), e.classList.add(tW), this._emulateAnimation(() => { C(t) }) } hide(t) { if (!this._config.isVisible) { C(t); return } this._getElement().classList.remove(tW), this._emulateAnimation(() => { this.dispose(), C(t) }) } dispose() { this._isAppended && (z.off(this._element, tB), this._element.remove(), this._isAppended = !1) } _getElement() { if (!this._element) { let t = document.createElement("div"); t.className = this._config.className, this._config.isAnimated && t.classList.add("fade"), this._element = t } return this._element } _configAfterMerge(t) { return t.rootElement = u(t.rootElement), t } _append() { if (this._isAppended) return; let t = this._getElement(); this._config.rootElement.append(t), z.on(t, tB, () => { C(this._config.clickCallback) }), this._isAppended = !0 } _emulateAnimation(t) { E(t, this._getElement(), this._config.isAnimated) } } let tY = ".bs.focustrap", tQ = `focusin${tY}`, tU = `keydown.tab${tY}`, t0 = "backward", t1 = { autofocus: !0, trapElement: null }, t3 = { autofocus: "boolean", trapElement: "element" }; class t2 extends Y { constructor(t) { super(), this._config = this._getConfig(t), this._isActive = !1, this._lastTabNavDirection = null } static get Default() { return t1 } static get DefaultType() { return t3 } static get NAME() { return "focustrap" } activate() { !this._isActive && (this._config.autofocus && this._config.trapElement.focus(), z.off(document, tY), z.on(document, tQ, t => this._handleFocusin(t)), z.on(document, tU, t => this._handleKeydown(t)), this._isActive = !0) } deactivate() { this._isActive && (this._isActive = !1, z.off(document, tY)) } _handleFocusin(t) { let { trapElement: e } = this._config; if (t.target === document || t.target === e || e.contains(t.target)) return; let i = tt.focusableChildren(e); 0 === i.length ? e.focus() : this._lastTabNavDirection === t0 ? i[i.length - 1].focus() : i[0].focus() } _handleKeydown(t) { "Tab" === t.key && (this._lastTabNavDirection = t.shiftKey ? t0 : "forward") } } let t4 = ".bs.modal", tG = `hide${t4}`, tZ = `hidePrevented${t4}`, t6 = `hidden${t4}`, tJ = `show${t4}`, tX = `shown${t4}`, t5 = `resize${t4}`, t7 = `click.dismiss${t4}`, et = `mousedown.dismiss${t4}`, ee = `keydown.dismiss${t4}`, ei = `click${t4}.data-api`, es = "modal-open", en = "show", er = "modal-static", eo = { backdrop: !0, focus: !0, keyboard: !0 }, el = { backdrop: "(boolean|string)", focus: "boolean", keyboard: "boolean" }; class ea extends Q { constructor(t, e) { super(t, e), this._dialog = tt.findOne(".modal-dialog", this._element), this._backdrop = this._initializeBackDrop(), this._focustrap = this._initializeFocusTrap(), this._isShown = !1, this._isTransitioning = !1, this._scrollBar = new class t { constructor() { this._element = document.body } getWidth() { let t = document.documentElement.clientWidth; return Math.abs(window.innerWidth - t) } hide() { let t = this.getWidth(); this._disableOverFlow(), this._setElementAttributes(this._element, tH, e => e + t), this._setElementAttributes(tj, tH, e => e + t), this._setElementAttributes(tF, tz, e => e - t) } reset() { this._resetElementAttributes(this._element, "overflow"), this._resetElementAttributes(this._element, tH), this._resetElementAttributes(tj, tH), this._resetElementAttributes(tF, tz) } isOverflowing() { return this.getWidth() > 0 } _disableOverFlow() { this._saveInitialAttribute(this._element, "overflow"), this._element.style.overflow = "hidden" } _setElementAttributes(t, e, i) { let s = this.getWidth(), n = t => { if (t !== this._element && window.innerWidth > t.clientWidth + s) return; this._saveInitialAttribute(t, e); let n = window.getComputedStyle(t).getPropertyValue(e); t.style.setProperty(e, `${i(Number.parseFloat(n))}px`) }; this._applyManipulationCallback(t, n) } _saveInitialAttribute(t, e) { let i = t.style.getPropertyValue(e); i && R.setDataAttribute(t, e, i) } _resetElementAttributes(t, e) { let i = t => { let i = R.getDataAttribute(t, e); if (null === i) { t.style.removeProperty(e); return } R.removeDataAttribute(t, e), t.style.setProperty(e, i) }; this._applyManipulationCallback(t, i) } _applyManipulationCallback(t, e) { if (c(t)) { e(t); return } for (let i of tt.find(t, this._element)) e(i) } }, this._addEventListeners() } static get Default() { return eo } static get DefaultType() { return el } static get NAME() { return "modal" } toggle(t) { return this._isShown ? this.hide() : this.show(t) } show(t) { if (this._isShown || this._isTransitioning) return; let e = z.trigger(this._element, tJ, { relatedTarget: t }); !e.defaultPrevented && (this._isShown = !0, this._isTransitioning = !0, this._scrollBar.hide(), document.body.classList.add(es), this._adjustDialog(), this._backdrop.show(() => this._showElement(t))) } hide() { if (!this._isShown || this._isTransitioning) return; let t = z.trigger(this._element, tG); !t.defaultPrevented && (this._isShown = !1, this._isTransitioning = !0, this._focustrap.deactivate(), this._element.classList.remove(en), this._queueCallback(() => this._hideModal(), this._element, this._isAnimated())) } dispose() { for (let t of [window, this._dialog]) z.off(t, t4); this._backdrop.dispose(), this._focustrap.deactivate(), super.dispose() } handleUpdate() { this._adjustDialog() } _initializeBackDrop() { return new tR({ isVisible: Boolean(this._config.backdrop), isAnimated: this._isAnimated() }) } _initializeFocusTrap() { return new t2({ trapElement: this._element }) } _showElement(t) { document.body.contains(this._element) || document.body.append(this._element), this._element.style.display = "block", this._element.removeAttribute("aria-hidden"), this._element.setAttribute("aria-modal", !0), this._element.setAttribute("role", "dialog"), this._element.scrollTop = 0; let e = tt.findOne(".modal-body", this._dialog); e && (e.scrollTop = 0), m(this._element), this._element.classList.add(en); let i = () => { this._config.focus && this._focustrap.activate(), this._isTransitioning = !1, z.trigger(this._element, tX, { relatedTarget: t }) }; this._queueCallback(i, this._dialog, this._isAnimated()) } _addEventListeners() { z.on(this._element, ee, t => { if ("Escape" === t.key) { if (this._config.keyboard) { t.preventDefault(), this.hide(); return } this._triggerBackdropTransition() } }), z.on(window, t5, () => { this._isShown && !this._isTransitioning && this._adjustDialog() }), z.on(this._element, et, t => { z.one(this._element, t7, e => { if (this._element === t.target && this._element === e.target) { if ("static" === this._config.backdrop) { this._triggerBackdropTransition(); return } this._config.backdrop && this.hide() } }) }) } _hideModal() { this._element.style.display = "none", this._element.setAttribute("aria-hidden", !0), this._element.removeAttribute("aria-modal"), this._element.removeAttribute("role"), this._isTransitioning = !1, this._backdrop.hide(() => { document.body.classList.remove(es), this._resetAdjustments(), this._scrollBar.reset(), z.trigger(this._element, t6) }) } _isAnimated() { return this._element.classList.contains("fade") } _triggerBackdropTransition() { let t = z.trigger(this._element, tZ); if (t.defaultPrevented) return; let e = this._element.scrollHeight > document.documentElement.clientHeight, i = this._element.style.overflowY; !("hidden" === i || this._element.classList.contains(er)) && (e || (this._element.style.overflowY = "hidden"), this._element.classList.add(er), this._queueCallback(() => { this._element.classList.remove(er), this._queueCallback(() => { this._element.style.overflowY = i }, this._dialog) }, this._dialog), this._element.focus()) } _adjustDialog() { let t = this._element.scrollHeight > document.documentElement.clientHeight, e = this._scrollBar.getWidth(), i = e > 0; if (i && !t) { let s = A() ? "paddingLeft" : "paddingRight"; this._element.style[s] = `${e}px` } if (!i && t) { let n = A() ? "paddingRight" : "paddingLeft"; this._element.style[n] = `${e}px` } } _resetAdjustments() { this._element.style.paddingLeft = "", this._element.style.paddingRight = "" } static jQueryInterface(t, e) { return this.each(function () { let i = ea.getOrCreateInstance(this, t); if ("string" == typeof t) { if (void 0 === i[t]) throw TypeError(`No method named "${t}"`); i[t](e) } }) } } z.on(document, ei, '[data-bs-toggle="modal"]', function (t) { let e = l(this);["A", "AREA"].includes(this.tagName) && t.preventDefault(), z.one(e, tJ, t => { !t.defaultPrevented && z.one(e, t6, () => { d(this) && this.focus() }) }); let i = tt.findOne(".modal.show"); i && ea.getInstance(i).hide(); let s = ea.getOrCreateInstance(e); s.toggle(this) }), U(ea), w(ea); let eh = new Set(["background", "cite", "href", "itemtype", "longdesc", "poster", "src", "xlink:href"]), ec = /^(?:(?:https?|mailto|ftp|tel|file|sms):|[^#&/:?]*(?:[#/?]|$))/i, eu = /^data:(?:image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\/(?:mpeg|mp4|ogg|webm)|audio\/(?:mp3|oga|ogg|opus));base64,[\d+/a-z]+=*$/i, ed = (t, e) => { let i = t.nodeName.toLowerCase(); return e.includes(i) ? !eh.has(i) || Boolean(ec.test(t.nodeValue) || eu.test(t.nodeValue)) : e.filter(t => t instanceof RegExp).some(t => t.test(i)) }, eg = { "*": ["class", "dir", "id", "lang", "role", /^aria-[\w-]*$/i], a: ["target", "href", "title", "rel"], area: [], b: [], br: [], col: [], code: [], div: [], em: [], hr: [], h1: [], h2: [], h3: [], h4: [], h5: [], h6: [], i: [], img: ["src", "srcset", "alt", "title", "width", "height"], li: [], ol: [], p: [], pre: [], s: [], small: [], span: [], sub: [], sup: [], strong: [], u: [], ul: [] }, ef = { allowList: eg, content: {}, extraClass: "", html: !1, sanitize: !0, sanitizeFn: null, template: "<div></div>" }, e8 = { allowList: "object", content: "object", extraClass: "(string|function)", html: "boolean", sanitize: "boolean", sanitizeFn: "(null|function)", template: "string" }, ep = { entry: "(string|element|function|null)", selector: "(string|element)" }; class em extends Y { constructor(t) { super(), this._config = this._getConfig(t) } static get Default() { return ef } static get DefaultType() { return e8 } static get NAME() { return "TemplateFactory" } getContent() { return Object.values(this._config.content).map(t => this._resolvePossibleFunction(t)).filter(Boolean) } hasContent() { return this.getContent().length > 0 } changeContent(t) { return this._checkContent(t), this._config.content = { ...this._config.content, ...t }, this } toHtml() { let t = document.createElement("div"); for (let [e, i] of (t.innerHTML = this._maybeSanitize(this._config.template), Object.entries(this._config.content))) this._setContent(t, i, e); let s = t.children[0], n = this._resolvePossibleFunction(this._config.extraClass); return n && s.classList.add(...n.split(" ")), s } _typeCheckConfig(t) { super._typeCheckConfig(t), this._checkContent(t.content) } _checkContent(t) { for (let [e, i] of Object.entries(t)) super._typeCheckConfig({ selector: e, entry: i }, ep) } _setContent(t, e, i) { let s = tt.findOne(i, t); if (s) { if (!(e = this._resolvePossibleFunction(e))) { s.remove(); return } if (c(e)) { this._putElementInTemplate(u(e), s); return } if (this._config.html) { s.innerHTML = this._maybeSanitize(e); return } s.textContent = e } } _maybeSanitize(t) { return this._config.sanitize ? function t(e, i, s) { if (!e.length) return e; if (s && "function" == typeof s) return s(e); let n = new window.DOMParser, r = n.parseFromString(e, "text/html"), o = [].concat(...r.body.querySelectorAll("*")); for (let l of o) { let a = l.nodeName.toLowerCase(); if (!Object.keys(i).includes(a)) { l.remove(); continue } let h = [].concat(...l.attributes), c = [].concat(i["*"] || [], i[a] || []); for (let u of h) ed(u, c) || l.removeAttribute(u.nodeName) } return r.body.innerHTML }(t, this._config.allowList, this._config.sanitizeFn) : t } _resolvePossibleFunction(t) { return "function" == typeof t ? t(this) : t } _putElementInTemplate(t, e) { if (this._config.html) { e.innerHTML = "", e.append(t); return } e.textContent = t.textContent } } let eb = new Set(["sanitize", "allowList", "sanitizeFn"]), ey = "fade", ev = "show", eA = ".modal", ew = "hide.bs.modal", eC = "hover", eE = "focus", eT = { AUTO: "auto", TOP: "top", RIGHT: A() ? "left" : "right", BOTTOM: "bottom", LEFT: A() ? "right" : "left" }, e$ = { allowList: eg, animation: !0, boundary: "clippingParents", container: !1, customClass: "", delay: 0, fallbackPlacements: ["top", "right", "bottom", "left"], html: !1, offset: [0, 0], placement: "top", popperConfig: null, sanitize: !0, sanitizeFn: null, selector: !1, template: '<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>', title: "", trigger: "hover focus" }, ek = { allowList: "object", animation: "boolean", boundary: "(string|element)", container: "(string|element|boolean)", customClass: "(string|function)", delay: "(number|object)", fallbackPlacements: "array", html: "boolean", offset: "(array|string|function)", placement: "(string|function)", popperConfig: "(null|object|function)", sanitize: "boolean", sanitizeFn: "(null|function)", selector: "(string|boolean)", template: "string", title: "(string|element|function)", trigger: "string" }; class e9 extends Q { constructor(t, i) { if (void 0 === e) throw TypeError("Bootstrap's tooltips require Popper (https://popper.js.org)"); super(t, i), this._isEnabled = !0, this._timeout = 0, this._isHovered = null, this._activeTrigger = {}, this._popper = null, this._templateFactory = null, this._newContent = null, this.tip = null, this._setListeners(), this._config.selector || this._fixTitle() } static get Default() { return e$ } static get DefaultType() { return ek } static get NAME() { return "tooltip" } enable() { this._isEnabled = !0 } disable() { this._isEnabled = !1 } toggleEnabled() { this._isEnabled = !this._isEnabled } toggle() { if (this._isEnabled) { if (this._activeTrigger.click = !this._activeTrigger.click, this._isShown()) { this._leave(); return } this._enter() } } dispose() { clearTimeout(this._timeout), z.off(this._element.closest(eA), ew, this._hideModalHandler), this.tip && this.tip.remove(), this._element.getAttribute("data-bs-original-title") && this._element.setAttribute("title", this._element.getAttribute("data-bs-original-title")), this._disposePopper(), super.dispose() } show() { if ("none" === this._element.style.display) throw Error("Please use show on visible elements"); if (!(this._isWithContent() && this._isEnabled)) return; let t = z.trigger(this._element, this.constructor.eventName("show")), e = f(this._element), i = (e || this._element.ownerDocument.documentElement).contains(this._element); if (t.defaultPrevented || !i) return; this.tip && (this.tip.remove(), this.tip = null); let s = this._getTipElement(); this._element.setAttribute("aria-describedby", s.getAttribute("id")); let { container: n } = this._config; if (this._element.ownerDocument.documentElement.contains(this.tip) || (n.append(s), z.trigger(this._element, this.constructor.eventName("inserted"))), this._popper ? this._popper.update() : this._popper = this._createPopper(s), s.classList.add(ev), "ontouchstart" in document.documentElement) for (let r of [].concat(...document.body.children)) z.on(r, "mouseover", p); let o = () => { z.trigger(this._element, this.constructor.eventName("shown")), !1 === this._isHovered && this._leave(), this._isHovered = !1 }; this._queueCallback(o, this.tip, this._isAnimated()) } hide() { if (!this._isShown()) return; let t = z.trigger(this._element, this.constructor.eventName("hide")); if (t.defaultPrevented) return; let e = this._getTipElement(); if (e.classList.remove(ev), "ontouchstart" in document.documentElement) for (let i of [].concat(...document.body.children)) z.off(i, "mouseover", p); this._activeTrigger.click = !1, this._activeTrigger[eE] = !1, this._activeTrigger[eC] = !1, this._isHovered = null; let s = () => { !this._isWithActiveTrigger() && (this._isHovered || e.remove(), this._element.removeAttribute("aria-describedby"), z.trigger(this._element, this.constructor.eventName("hidden")), this._disposePopper()) }; this._queueCallback(s, this.tip, this._isAnimated()) } update() { this._popper && this._popper.update() } _isWithContent() { return Boolean(this._getTitle()) } _getTipElement() { return this.tip || (this.tip = this._createTipElement(this._newContent || this._getContentForTemplate())), this.tip } _createTipElement(t) { let e = this._getTemplateFactory(t).toHtml(); if (!e) return null; e.classList.remove(ey, ev), e.classList.add(`bs-${this.constructor.NAME}-auto`); let i = n(this.constructor.NAME).toString(); return e.setAttribute("id", i), this._isAnimated() && e.classList.add(ey), e } setContent(t) { this._newContent = t, this._isShown() && (this._disposePopper(), this.show()) } _getTemplateFactory(t) { return this._templateFactory ? this._templateFactory.changeContent(t) : this._templateFactory = new em({ ...this._config, content: t, extraClass: this._resolvePossibleFunction(this._config.customClass) }), this._templateFactory } _getContentForTemplate() { return { ".tooltip-inner": this._getTitle() } } _getTitle() { return this._resolvePossibleFunction(this._config.title) || this._element.getAttribute("data-bs-original-title") } _initializeOnDelegatedTarget(t) { return this.constructor.getOrCreateInstance(t.delegateTarget, this._getDelegateConfig()) } _isAnimated() { return this._config.animation || this.tip && this.tip.classList.contains(ey) } _isShown() { return this.tip && this.tip.classList.contains(ev) } _createPopper(t) { let i = "function" == typeof this._config.placement ? this._config.placement.call(this, t, this._element) : this._config.placement, s = eT[i.toUpperCase()]; return e.createPopper(this._element, t, this._getPopperConfig(s)) } _getOffset() { let { offset: t } = this._config; return "string" == typeof t ? t.split(",").map(t => Number.parseInt(t, 10)) : "function" == typeof t ? e => t(e, this._element) : t } _resolvePossibleFunction(t) { return "function" == typeof t ? t.call(this._element) : t } _getPopperConfig(t) { let e = { placement: t, modifiers: [{ name: "flip", options: { fallbackPlacements: this._config.fallbackPlacements } }, { name: "offset", options: { offset: this._getOffset() } }, { name: "preventOverflow", options: { boundary: this._config.boundary } }, { name: "arrow", options: { element: `.${this.constructor.NAME}-arrow` } }, { name: "preSetPlacement", enabled: !0, phase: "beforeMain", fn: t => { this._getTipElement().setAttribute("data-popper-placement", t.state.placement) } }] }; return { ...e, ..."function" == typeof this._config.popperConfig ? this._config.popperConfig(e) : this._config.popperConfig } } _setListeners() { let t = this._config.trigger.split(" "); for (let e of t) if ("click" === e) z.on(this._element, this.constructor.eventName("click"), this._config.selector, t => { let e = this._initializeOnDelegatedTarget(t); e.toggle() }); else if ("manual" !== e) { let i = e === eC ? this.constructor.eventName("mouseenter") : this.constructor.eventName("focusin"), s = e === eC ? this.constructor.eventName("mouseleave") : this.constructor.eventName("focusout"); z.on(this._element, i, this._config.selector, t => { let e = this._initializeOnDelegatedTarget(t); e._activeTrigger["focusin" === t.type ? eE : eC] = !0, e._enter() }), z.on(this._element, s, this._config.selector, t => { let e = this._initializeOnDelegatedTarget(t); e._activeTrigger["focusout" === t.type ? eE : eC] = e._element.contains(t.relatedTarget), e._leave() }) } this._hideModalHandler = () => { this._element && this.hide() }, z.on(this._element.closest(eA), ew, this._hideModalHandler) } _fixTitle() { let t = this._element.getAttribute("title"); t && (this._element.getAttribute("aria-label") || this._element.textContent.trim() || this._element.setAttribute("aria-label", t), this._element.setAttribute("data-bs-original-title", t), this._element.removeAttribute("title")) } _enter() { if (this._isShown() || this._isHovered) { this._isHovered = !0; return } this._isHovered = !0, this._setTimeout(() => { this._isHovered && this.show() }, this._config.delay.show) } _leave() { !this._isWithActiveTrigger() && (this._isHovered = !1, this._setTimeout(() => { this._isHovered || this.hide() }, this._config.delay.hide)) } _setTimeout(t, e) { clearTimeout(this._timeout), this._timeout = setTimeout(t, e) } _isWithActiveTrigger() { return Object.values(this._activeTrigger).includes(!0) } _getConfig(t) { let e = R.getDataAttributes(this._element); for (let i of Object.keys(e)) eb.has(i) && delete e[i]; return t = { ...e, ..."object" == typeof t && t ? t : {} }, t = this._mergeConfigObj(t), t = this._configAfterMerge(t), this._typeCheckConfig(t), t } _configAfterMerge(t) { return t.container = !1 === t.container ? document.body : u(t.container), "number" == typeof t.delay && (t.delay = { show: t.delay, hide: t.delay }), "number" == typeof t.title && (t.title = t.title.toString()), "number" == typeof t.content && (t.content = t.content.toString()), t } _getDelegateConfig() { let t = {}; for (let e in this._config) this.constructor.Default[e] !== this._config[e] && (t[e] = this._config[e]); return t.selector = !1, t.trigger = "manual", t } _disposePopper() { this._popper && (this._popper.destroy(), this._popper = null) } static jQueryInterface(t) { return this.each(function () { let e = e9.getOrCreateInstance(this, t); if ("string" == typeof t) { if (void 0 === e[t]) throw TypeError(`No method named "${t}"`); e[t]() } }) } } w(e9); let eL = { ...e9.Default, content: "", offset: [0, 8], placement: "right", template: '<div class="popover" role="tooltip"><div class="popover-arrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>', trigger: "click" }, eD = { ...e9.DefaultType, content: "(null|string|element|function)" }; class eN extends e9 { static get Default() { return eL } static get DefaultType() { return eD } static get NAME() { return "popover" } _isWithContent() { return this._getTitle() || this._getContent() } _getContentForTemplate() { return { ".popover-header": this._getTitle(), ".popover-body": this._getContent() } } _getContent() { return this._resolvePossibleFunction(this._config.content) } static jQueryInterface(t) { return this.each(function () { let e = eN.getOrCreateInstance(this, t); if ("string" == typeof t) { if (void 0 === e[t]) throw TypeError(`No method named "${t}"`); e[t]() } }) } } w(eN); let eI = ".bs.tab", eP = `hide${eI}`, eO = `hidden${eI}`, eS = `show${eI}`, e_ = `shown${eI}`, ex = `click${eI}`, eM = `keydown${eI}`, ej = `load${eI}`, eF = "ArrowRight", eH = "ArrowDown", ez = "active", eq = "fade", eW = "show", eB = ":not(.dropdown-toggle)", eK = `.nav-link${eB}, .list-group-item${eB}, [role="tab"]${eB}`, eV = '[data-bs-toggle="tab"], [data-bs-toggle="pill"], [data-bs-toggle="list"]', eR = `${eK}, ${eV}`, eY = `.${ez}[data-bs-toggle="tab"], .${ez}[data-bs-toggle="pill"], .${ez}[data-bs-toggle="list"]`; class eQ extends Q { constructor(t) { if (super(t), this._parent = this._element.closest('.list-group, .nav, [role="tablist"]'), !this._parent) return; this._setInitialAttributes(this._parent, this._getChildren()), z.on(this._element, eM, t => this._keydown(t)) } static get NAME() { return "tab" } show() { let t = this._element; if (this._elemIsActive(t)) return; let e = this._getActiveElem(), i = e ? z.trigger(e, eP, { relatedTarget: t }) : null, s = z.trigger(t, eS, { relatedTarget: e }); !s.defaultPrevented && (!i || !i.defaultPrevented) && (this._deactivate(e, t), this._activate(t, e)) } _activate(t, e) { if (!t) return; t.classList.add(ez), this._activate(l(t)); let i = () => { if ("tab" !== t.getAttribute("role")) { t.classList.add(eW); return } t.removeAttribute("tabindex"), t.setAttribute("aria-selected", !0), this._toggleDropDown(t, !0), z.trigger(t, e_, { relatedTarget: e }) }; this._queueCallback(i, t, t.classList.contains(eq)) } _deactivate(t, e) { if (!t) return; t.classList.remove(ez), t.blur(), this._deactivate(l(t)); let i = () => { if ("tab" !== t.getAttribute("role")) { t.classList.remove(eW); return } t.setAttribute("aria-selected", !1), t.setAttribute("tabindex", "-1"), this._toggleDropDown(t, !1), z.trigger(t, eO, { relatedTarget: e }) }; this._queueCallback(i, t, t.classList.contains(eq)) } _keydown(t) { if (!["ArrowLeft", eF, "ArrowUp", eH].includes(t.key)) return; t.stopPropagation(), t.preventDefault(); let e = [eF, eH].includes(t.key), i = T(this._getChildren().filter(t => !g(t)), t.target, e, !0); i && (i.focus({ preventScroll: !0 }), eQ.getOrCreateInstance(i).show()) } _getChildren() { return tt.find(eR, this._parent) } _getActiveElem() { return this._getChildren().find(t => this._elemIsActive(t)) || null } _setInitialAttributes(t, e) { for (let i of (this._setAttributeIfNotExists(t, "role", "tablist"), e)) this._setInitialAttributesOnChild(i) } _setInitialAttributesOnChild(t) { t = this._getInnerElement(t); let e = this._elemIsActive(t), i = this._getOuterElement(t); t.setAttribute("aria-selected", e), i !== t && this._setAttributeIfNotExists(i, "role", "presentation"), e || t.setAttribute("tabindex", "-1"), this._setAttributeIfNotExists(t, "role", "tab"), this._setInitialAttributesOnTargetPanel(t) } _setInitialAttributesOnTargetPanel(t) { let e = l(t); e && (this._setAttributeIfNotExists(e, "role", "tabpanel"), t.id && this._setAttributeIfNotExists(e, "aria-labelledby", `#${t.id}`)) } _toggleDropDown(t, e) { let i = this._getOuterElement(t); if (!i.classList.contains("dropdown")) return; let s = (t, s) => { let n = tt.findOne(t, i); n && n.classList.toggle(s, e) }; s(".dropdown-toggle", ez), s(".dropdown-menu", eW), i.setAttribute("aria-expanded", e) } _setAttributeIfNotExists(t, e, i) { t.hasAttribute(e) || t.setAttribute(e, i) } _elemIsActive(t) { return t.classList.contains(ez) } _getInnerElement(t) { return t.matches(eR) ? t : tt.findOne(eR, t) } _getOuterElement(t) { return t.closest(".nav-item, .list-group-item") || t } static jQueryInterface(t) { return this.each(function () { let e = eQ.getOrCreateInstance(this); if ("string" == typeof t) { if (void 0 === e[t] || t.startsWith("_") || "constructor" === t) throw TypeError(`No method named "${t}"`); e[t]() } }) } } z.on(document, ex, eV, function (t) { ["A", "AREA"].includes(this.tagName) && t.preventDefault(), !g(this) && eQ.getOrCreateInstance(this).show() }), z.on(window, ej, () => { for (let t of tt.find(eY)) eQ.getOrCreateInstance(t) }), w(eQ); let eU = ".bs.toast", e0 = `mouseover${eU}`, e1 = `mouseout${eU}`, e3 = `focusin${eU}`, e2 = `focusout${eU}`, e4 = `hide${eU}`, eG = `hidden${eU}`, eZ = `show${eU}`, e6 = `shown${eU}`, eJ = "hide", eX = "show", e5 = "showing", e7 = { animation: "boolean", autohide: "boolean", delay: "number" }, it = { animation: !0, autohide: !0, delay: 5e3 }; class ie extends Q { constructor(t, e) { super(t, e), this._timeout = null, this._hasMouseInteraction = !1, this._hasKeyboardInteraction = !1, this._setListeners() } static get Default() { return it } static get DefaultType() { return e7 } static get NAME() { return "toast" } show() { let t = z.trigger(this._element, eZ); if (t.defaultPrevented) return; this._clearTimeout(), this._config.animation && this._element.classList.add("fade"); let e = () => { this._element.classList.remove(e5), z.trigger(this._element, e6), this._maybeScheduleHide() }; this._element.classList.remove(eJ), m(this._element), this._element.classList.add(eX, e5), this._queueCallback(e, this._element, this._config.animation) } hide() { if (!this.isShown()) return; let t = z.trigger(this._element, e4); if (t.defaultPrevented) return; let e = () => { this._element.classList.add(eJ), this._element.classList.remove(e5, eX), z.trigger(this._element, eG) }; this._element.classList.add(e5), this._queueCallback(e, this._element, this._config.animation) } dispose() { this._clearTimeout(), this.isShown() && this._element.classList.remove(eX), super.dispose() } isShown() { return this._element.classList.contains(eX) } _maybeScheduleHide() { this._config.autohide && !this._hasMouseInteraction && !this._hasKeyboardInteraction && (this._timeout = setTimeout(() => { this.hide() }, this._config.delay)) } _onInteraction(t, e) { switch (t.type) { case "mouseover": case "mouseout": this._hasMouseInteraction = e; break; case "focusin": case "focusout": this._hasKeyboardInteraction = e }if (e) { this._clearTimeout(); return } let i = t.relatedTarget; !(this._element === i || this._element.contains(i)) && this._maybeScheduleHide() } _setListeners() { z.on(this._element, e0, t => this._onInteraction(t, !0)), z.on(this._element, e1, t => this._onInteraction(t, !1)), z.on(this._element, e3, t => this._onInteraction(t, !0)), z.on(this._element, e2, t => this._onInteraction(t, !1)) } _clearTimeout() { clearTimeout(this._timeout), this._timeout = null } static jQueryInterface(t) { return this.each(function () { let e = ie.getOrCreateInstance(this, t); if ("string" == typeof t) { if (void 0 === e[t]) throw TypeError(`No method named "${t}"`); e[t](this) } }) } } return U(ie), w(ie), { Alert: X, Collapse: tf, Dropdown: tM, Modal: ea, Popover: eN, Tab: eQ, Toast: ie, Tooltip: e9 } });